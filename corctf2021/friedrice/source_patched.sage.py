#!/usr/bin/exec-suid -- /usr/bin/python3 -I

# This file was *autogenerated* from the file source_patched.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_7 = Integer(7); _sage_const_26 = Integer(26); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_3 = Integer(3); _sage_const_16 = Integer(16); _sage_const_512 = Integer(512); _sage_const_65537 = Integer(65537); _sage_const_1024 = Integer(1024)
from random import shuffle, randrange, randint
from os import urandom
from Crypto.Util.number import getPrime, getStrongPrime, long_to_bytes
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import os
import sys

class RNG:
    def __init__(self, seed, a, b):
        self.state = seed
        self.a = a
        self.b = b
        print('a:', a)
        print('b:', b)

    def nextbits(self, bitlen):
        out = _sage_const_0 
        for _ in range(bitlen):
            out <<= _sage_const_1 
            self.state = self.a * self.state + self.b
            bit = int(sum(self.state[i] for i in range(_sage_const_7 )))
            out += bit
        return out

def get_params(rng, bitlen):
    p = next_prime((_sage_const_1  << (bitlen - _sage_const_1 )) | rng.nextbits(bitlen))
    q = next_prime((_sage_const_1  << (bitlen - _sage_const_1 )) | rng.nextbits(bitlen))
    N = p * q
    return N, p, q

LIMIT = _sage_const_26 
P = PolynomialRing(GF(_sage_const_2 ), names=('x',)); (x,) = P._first_ngens(1)
F = P.quo(x**_sage_const_128  + x**_sage_const_7  + x**_sage_const_2  + x + _sage_const_1 , names=('x',)); (x,) = F._first_ngens(1)
key, a, b = [F.random_element() for _ in range(_sage_const_3 )]
bytekey = long_to_bytes(int(''.join(list(map(str, key.list()))), _sage_const_2 ))
iv = urandom(_sage_const_16 )
cipher = AES.new(bytekey, AES.MODE_CBC, iv)
rng = RNG(key, a, b)
N, p, q = get_params(rng, _sage_const_512 )
if randint(_sage_const_0 , _sage_const_1 ):
    p, q = q, p
e = _sage_const_65537 
d = inverse_mod(e, (p-_sage_const_1 )*(q-_sage_const_1 ))
dp = d % (p-_sage_const_1 )
r = getStrongPrime(_sage_const_1024 )
g = randrange(_sage_const_2 , r)
print('iv:', iv.hex())
print('N:', N)
print('e:', e)
print('g:', g)
print('r:', r)

# Read the flag in binary mode
with open('/flag', 'rb') as file:
    flag = file.read().strip()

# Encrypt the flag after padding
encrypted_flag = cipher.encrypt(pad(flag, _sage_const_16 ))
print('encrypted flag:', encrypted_flag.hex())
print()
print("now, let's cook some fried rice!")
for _ in range(LIMIT):
    sys.stdout.flush()
    m = int(input('add something in(in hex)> '), _sage_const_16 )
    dp ^= m
    print('flip!', pow(g, dp, r))
print("it's done. enjoy your fried rice!")


