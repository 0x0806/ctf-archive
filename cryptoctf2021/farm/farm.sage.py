#!/usr/bin/exec-suid -- /usr/bin/python3 -I

# This file was *autogenerated* from the file farm.sage
from sage.all_cmdline import *   # import sage library

_sage_const_62 = Integer(62); _sage_const_64 = Integer(64); _sage_const_1 = Integer(1); _sage_const_63 = Integer(63); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_14 = Integer(14)#!/usr/bin/env sage

from sage.all import *
import string, base64, math
# from flag import flag

ALPHABET = string.printable[:_sage_const_62 ] + '\\='

F = list(GF(_sage_const_64 ))

def keygen(l):
	key = [F[randint(_sage_const_1 , _sage_const_63 )] for _ in range(l)] 
	key = math.prod(key) # Optimization the key length :D
	return key

def maptofarm(c):
	assert c in ALPHABET
	return F[ALPHABET.index(c)]

def encrypt(msg, key):
	m64 = base64.b64encode(msg.encode())
	enc, pkey = '', key**_sage_const_5  + key**_sage_const_3  + key**_sage_const_2  + _sage_const_1 
	for m in m64:
		enc += ALPHABET[F.index(pkey * maptofarm(chr(m)))]
	return enc

# Read the flag from the /flag file
with open('/flag', 'r') as f:
    flag = f.read().strip()

# KEEP IT SECRET 
key = keygen(_sage_const_14 ) # I think 64**14 > 2**64 is not brute-forcible :P

enc = encrypt(flag, key)
print(f'enc = {enc}')

